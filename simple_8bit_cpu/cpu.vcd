$date
	Wed Jul 16 20:10:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_testbench $end
$var wire 4 ! pc [3:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module cpu $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 1 $ zero_flag $end
$var wire 3 % src [2:0] $end
$var wire 8 & reg_data2 [7:0] $end
$var wire 8 ' reg_data1 [7:0] $end
$var wire 4 ( pc [3:0] $end
$var wire 3 ) opcode [2:0] $end
$var wire 8 * instruction [7:0] $end
$var wire 3 + dest [2:0] $end
$var wire 8 , alu_result [7:0] $end
$var reg 1 - jump $end
$var reg 4 . jump_addr [3:0] $end
$var reg 3 / write_addr [2:0] $end
$var reg 8 0 write_data [7:0] $end
$var reg 1 1 write_en $end
$scope module ALU $end
$var wire 8 2 operand2 [7:0] $end
$var wire 8 3 operand1 [7:0] $end
$var wire 3 4 opcode [2:0] $end
$var reg 8 5 result [7:0] $end
$var reg 1 $ zero_flag $end
$upscope $end
$scope module DEC $end
$var wire 3 6 reg2_or_imm [2:0] $end
$var wire 3 7 reg1 [2:0] $end
$var wire 3 8 opcode [2:0] $end
$var wire 8 9 instruction [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 " clk $end
$var wire 1 - jump $end
$var wire 4 : jump_addr [3:0] $end
$var wire 1 # reset $end
$var reg 4 ; pc_out [3:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 1 " clk $end
$var wire 3 < read_addr1 [2:0] $end
$var wire 3 = read_addr2 [2:0] $end
$var wire 8 > read_data1 [7:0] $end
$var wire 8 ? read_data2 [7:0] $end
$var wire 3 @ write_addr [2:0] $end
$var wire 8 A write_data [7:0] $end
$var wire 1 1 write_en $end
$var wire 2 B actual_write_addr [1:0] $end
$var wire 2 C actual_read_addr2 [1:0] $end
$var wire 2 D actual_read_addr1 [1:0] $end
$upscope $end
$scope module ROM $end
$var wire 4 E addr [3:0] $end
$var wire 8 F data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10101101 F
b0 E
b1 D
b1 C
bx B
bx A
bx @
bx ?
bx >
b101 =
b1 <
b0 ;
bx :
b10101101 9
b101 8
b1 7
b101 6
bx 5
b101 4
bx 3
bx 2
x1
bx 0
bx /
bx .
x-
bx ,
b1 +
b10101101 *
b101 )
b0 (
bx '
bx &
b101 %
x$
1#
0"
b0 !
$end
#5000
b0 .
b0 :
0-
01
1"
#10000
0"
0#
#15000
b10 C
b10 D
b110 %
b110 6
b110 =
b10 +
b10 7
b10 <
b1 B
b10110110 *
b10110110 9
b10110110 F
b1 !
b1 (
b1 ;
b1 E
11
b1 0
b1 A
b1 /
b1 @
1"
#20000
0"
#25000
b11 C
b0 D
b111 %
b111 6
b111 =
b0 +
b0 7
b0 <
b110 )
b110 4
b110 8
b10 B
b11000111 *
b11000111 9
b11000111 F
b10 !
b10 (
b10 ;
b10 E
b10 0
b10 A
b10 /
b10 @
11
1"
#30000
0"
#35000
0$
b11 ,
b11 5
b10 &
b10 2
b10 ?
b10 C
b1 '
b1 3
b1 >
b1 D
b10 %
b10 6
b10 =
b1 +
b1 7
b1 <
b0 )
b0 4
b0 8
b0 B
b1010 *
b1010 9
b1010 F
b11 !
b11 (
b11 ;
b11 E
b0 0
b0 A
b0 /
b0 @
01
1"
#40000
0"
#45000
b10 '
b10 3
b10 >
b10 D
b100 ,
b100 5
b10 +
b10 7
b10 <
b1 )
b1 4
b1 8
b1 B
b110010 *
b110010 9
b110010 F
b100 !
b100 (
b100 ;
b100 E
b11 0
b11 A
11
b1 /
b1 @
1"
#50000
0"
#55000
x$
bx &
bx 2
bx ?
b11 C
b11 '
b11 3
b11 >
b1 D
b0xx ,
b0xx 5
b11 %
b11 6
b11 =
b1 +
b1 7
b1 <
b10 )
b10 4
b10 8
b10 B
b1001011 *
b1001011 9
b1001011 F
b101 !
b101 (
b101 ;
b101 E
b100 0
b100 A
b10 /
b10 @
11
1"
#60000
0"
#65000
0$
bx11 ,
bx11 5
b11 )
b11 4
b11 8
b1 B
b1101011 *
b1101011 9
b1101011 F
b110 !
b110 (
b110 ;
b110 E
b0xx 0
b0xx A
b1 /
b1 @
11
1"
#70000
0"
#75000
b11 D
b111 %
b111 6
b111 =
b11 +
b11 7
b11 <
x$
bx ,
bx 5
b1111111 *
b1111111 9
b1111111 F
b111 !
b111 (
b111 ;
b111 E
bx11 0
bx11 A
11
bx '
bx 3
bx >
1"
#80000
0"
#85000
bx11 '
bx11 3
bx11 >
b1 D
b11 %
b11 6
b11 =
b1 +
b1 7
b1 <
b100 )
b100 4
b100 8
b11 B
b10001011 *
b10001011 9
b10001011 F
b1000 !
b1000 (
b1000 ;
b1000 E
b111 .
b111 :
1-
bx 0
bx A
b11 /
b11 @
01
1"
#90000
0"
#95000
bx '
bx 3
bx >
b11 D
x$
bx ,
bx 5
b111 %
b111 6
b111 =
b11 +
b11 7
b11 <
b11 )
b11 4
b11 8
b1 B
b1111111 *
b1111111 9
b1111111 F
b111 !
b111 (
b111 ;
b111 E
11
b0 .
b0 :
0-
bx 0
bx A
b1 /
b1 @
1"
#100000
0"
#105000
b1 D
b11 %
b11 6
b11 =
b1 +
b1 7
b1 <
b100 )
b100 4
b100 8
b11 B
b10001011 *
b10001011 9
b10001011 F
b1000 !
b1000 (
b1000 ;
b1000 E
b111 .
b111 :
1-
bx 0
bx A
b11 /
b11 @
01
1"
#110000
0"
#115000
b11 D
b111 %
b111 6
b111 =
b11 +
b11 7
b11 <
b11 )
b11 4
b11 8
b1 B
b1111111 *
b1111111 9
b1111111 F
b111 !
b111 (
b111 ;
b111 E
11
b0 .
b0 :
0-
bx 0
bx A
b1 /
b1 @
1"
#120000
0"
#125000
b1 D
b11 %
b11 6
b11 =
b1 +
b1 7
b1 <
b100 )
b100 4
b100 8
b11 B
b10001011 *
b10001011 9
b10001011 F
b1000 !
b1000 (
b1000 ;
b1000 E
b111 .
b111 :
1-
bx 0
bx A
b11 /
b11 @
01
1"
#130000
0"
#135000
b11 D
b111 %
b111 6
b111 =
b11 +
b11 7
b11 <
b11 )
b11 4
b11 8
b1 B
b1111111 *
b1111111 9
b1111111 F
b111 !
b111 (
b111 ;
b111 E
11
b0 .
b0 :
0-
bx 0
bx A
b1 /
b1 @
1"
#140000
0"
#145000
b1 D
b11 %
b11 6
b11 =
b1 +
b1 7
b1 <
b100 )
b100 4
b100 8
b11 B
b10001011 *
b10001011 9
b10001011 F
b1000 !
b1000 (
b1000 ;
b1000 E
b111 .
b111 :
1-
bx 0
bx A
b11 /
b11 @
01
1"
#150000
0"
#155000
b11 D
b111 %
b111 6
b111 =
b11 +
b11 7
b11 <
b11 )
b11 4
b11 8
b1 B
b1111111 *
b1111111 9
b1111111 F
b111 !
b111 (
b111 ;
b111 E
11
b0 .
b0 :
0-
bx 0
bx A
b1 /
b1 @
1"
#160000
0"
